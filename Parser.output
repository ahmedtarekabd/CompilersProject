Terminals unused in grammar

   POW
   ASSIGN
   LPAREN
   RPAREN
   LBRACE
   RBRACE
   SEMICOLON
   IF
   ELSE
   SWITCH
   INT
   FLOAT
   CHAR


Grammar

    0 $accept: STMT $end

    1 STMT: EXP

    2 LOGICAL_EXP: REL_EXP OR LOGICAL_EXP
    3            | REL_EXP AND LOGICAL_EXP
    4            | REL_EXP

    5 REL_EXP: EXP EQ EXP
    6        | EXP NE EXP
    7        | EXP LT EXP
    8        | EXP LE EXP
    9        | EXP GT EXP
   10        | EXP GE EXP
   11        | EXP

   12 EXP: EXP ADD TERM
   13    | EXP SUB TERM
   14    | TERM

   15 TERM: TERM MUL FACTOR
   16     | TERM DIV FACTOR
   17     | FACTOR

   18 FACTOR: '(' LOGICAL_EXP ')'
   19       | SUB FACTOR
   20       | NOT FACTOR
   21       | INTEGER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 18
')' (41) 18
error (256)
POW (258)
NOT (259) 20
OR (260) 2
AND (261) 3
EQ (262) 5
NE (263) 6
LT (264) 7
LE (265) 8
GT (266) 9
GE (267) 10
ASSIGN (268)
LPAREN (269)
RPAREN (270)
LBRACE (271)
RBRACE (272)
SEMICOLON (273)
IF (274)
ELSE (275)
SWITCH (276)
INT (277)
FLOAT (278)
CHAR (279)
SUB (280) 13 19
ADD (281) 12
DIV (282) 16
MUL (283) 15
INTEGER (284) 21


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
STMT (33)
    on left: 1, on right: 0
LOGICAL_EXP (34)
    on left: 2 3 4, on right: 2 3 18
REL_EXP (35)
    on left: 5 6 7 8 9 10 11, on right: 2 3 4
EXP (36)
    on left: 12 13 14, on right: 1 5 6 7 8 9 10 11 12 13
TERM (37)
    on left: 15 16 17, on right: 12 13 14 15 16
FACTOR (38)
    on left: 18 19 20 21, on right: 15 16 17 19 20


state 0

    0 $accept: . STMT $end

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    STMT    go to state 5
    EXP     go to state 6
    TERM    go to state 7
    FACTOR  go to state 8


state 1

   20 FACTOR: NOT . FACTOR

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    FACTOR  go to state 9


state 2

   19 FACTOR: SUB . FACTOR

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    FACTOR  go to state 10


state 3

   21 FACTOR: INTEGER .

    $default  reduce using rule 21 (FACTOR)


state 4

   18 FACTOR: '(' . LOGICAL_EXP ')'

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    LOGICAL_EXP  go to state 11
    REL_EXP      go to state 12
    EXP          go to state 13
    TERM         go to state 7
    FACTOR       go to state 8


state 5

    0 $accept: STMT . $end

    $end  shift, and go to state 14


state 6

    1 STMT: EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 1 (STMT)


state 7

   14 EXP: TERM .
   15 TERM: TERM . MUL FACTOR
   16     | TERM . DIV FACTOR

    DIV  shift, and go to state 17
    MUL  shift, and go to state 18

    $default  reduce using rule 14 (EXP)


state 8

   17 TERM: FACTOR .

    $default  reduce using rule 17 (TERM)


state 9

   20 FACTOR: NOT FACTOR .

    $default  reduce using rule 20 (FACTOR)


state 10

   19 FACTOR: SUB FACTOR .

    $default  reduce using rule 19 (FACTOR)


state 11

   18 FACTOR: '(' LOGICAL_EXP . ')'

    ')'  shift, and go to state 19


state 12

    2 LOGICAL_EXP: REL_EXP . OR LOGICAL_EXP
    3            | REL_EXP . AND LOGICAL_EXP
    4            | REL_EXP .

    OR   shift, and go to state 20
    AND  shift, and go to state 21

    $default  reduce using rule 4 (LOGICAL_EXP)


state 13

    5 REL_EXP: EXP . EQ EXP
    6        | EXP . NE EXP
    7        | EXP . LT EXP
    8        | EXP . LE EXP
    9        | EXP . GT EXP
   10        | EXP . GE EXP
   11        | EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    EQ   shift, and go to state 22
    NE   shift, and go to state 23
    LT   shift, and go to state 24
    LE   shift, and go to state 25
    GT   shift, and go to state 26
    GE   shift, and go to state 27
    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 11 (REL_EXP)


state 14

    0 $accept: STMT $end .

    $default  accept


state 15

   13 EXP: EXP SUB . TERM

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    TERM    go to state 28
    FACTOR  go to state 8


state 16

   12 EXP: EXP ADD . TERM

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    TERM    go to state 29
    FACTOR  go to state 8


state 17

   16 TERM: TERM DIV . FACTOR

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    FACTOR  go to state 30


state 18

   15 TERM: TERM MUL . FACTOR

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    FACTOR  go to state 31


state 19

   18 FACTOR: '(' LOGICAL_EXP ')' .

    $default  reduce using rule 18 (FACTOR)


state 20

    2 LOGICAL_EXP: REL_EXP OR . LOGICAL_EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    LOGICAL_EXP  go to state 32
    REL_EXP      go to state 12
    EXP          go to state 13
    TERM         go to state 7
    FACTOR       go to state 8


state 21

    3 LOGICAL_EXP: REL_EXP AND . LOGICAL_EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    LOGICAL_EXP  go to state 33
    REL_EXP      go to state 12
    EXP          go to state 13
    TERM         go to state 7
    FACTOR       go to state 8


state 22

    5 REL_EXP: EXP EQ . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 34
    TERM    go to state 7
    FACTOR  go to state 8


state 23

    6 REL_EXP: EXP NE . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 35
    TERM    go to state 7
    FACTOR  go to state 8


state 24

    7 REL_EXP: EXP LT . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 36
    TERM    go to state 7
    FACTOR  go to state 8


state 25

    8 REL_EXP: EXP LE . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 37
    TERM    go to state 7
    FACTOR  go to state 8


state 26

    9 REL_EXP: EXP GT . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 38
    TERM    go to state 7
    FACTOR  go to state 8


state 27

   10 REL_EXP: EXP GE . EXP

    NOT      shift, and go to state 1
    SUB      shift, and go to state 2
    INTEGER  shift, and go to state 3
    '('      shift, and go to state 4

    EXP     go to state 39
    TERM    go to state 7
    FACTOR  go to state 8


state 28

   13 EXP: EXP SUB TERM .
   15 TERM: TERM . MUL FACTOR
   16     | TERM . DIV FACTOR

    DIV  shift, and go to state 17
    MUL  shift, and go to state 18

    $default  reduce using rule 13 (EXP)


state 29

   12 EXP: EXP ADD TERM .
   15 TERM: TERM . MUL FACTOR
   16     | TERM . DIV FACTOR

    DIV  shift, and go to state 17
    MUL  shift, and go to state 18

    $default  reduce using rule 12 (EXP)


state 30

   16 TERM: TERM DIV FACTOR .

    $default  reduce using rule 16 (TERM)


state 31

   15 TERM: TERM MUL FACTOR .

    $default  reduce using rule 15 (TERM)


state 32

    2 LOGICAL_EXP: REL_EXP OR LOGICAL_EXP .

    $default  reduce using rule 2 (LOGICAL_EXP)


state 33

    3 LOGICAL_EXP: REL_EXP AND LOGICAL_EXP .

    $default  reduce using rule 3 (LOGICAL_EXP)


state 34

    5 REL_EXP: EXP EQ EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 5 (REL_EXP)


state 35

    6 REL_EXP: EXP NE EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 6 (REL_EXP)


state 36

    7 REL_EXP: EXP LT EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 7 (REL_EXP)


state 37

    8 REL_EXP: EXP LE EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 8 (REL_EXP)


state 38

    9 REL_EXP: EXP GT EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 9 (REL_EXP)


state 39

   10 REL_EXP: EXP GE EXP .
   12 EXP: EXP . ADD TERM
   13    | EXP . SUB TERM

    SUB  shift, and go to state 15
    ADD  shift, and go to state 16

    $default  reduce using rule 10 (REL_EXP)
