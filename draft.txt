(void|int|float|char)[ \t]+[a-zA-Z_][a-zA-Z0-9_]*([ \t]*)?\(((int|float|char)[ \t]+[a-zA-Z_][a-zA-Z0-9_]*([ \t]*)?(,[ \t]*(int|float|char)[ \t]+[a-zA-Z_][a-zA-Z0-9_]*([ \t]*)?)*)?\) {
    char *token = strdup(yytext); // Copy the entire matched string

    // Extract return type
    char *return_type = strtok(token, " ");
    DataType type;
    if (strcmp(return_type, "void") == 0) {
        type = TYPE_VOID;
    } else if (strcmp(return_type, "int") == 0) {
        type = TYPE_INT;
    } else if (strcmp(return_type, "float") == 0) {
        type = TYPE_FLOAT;
    } else if (strcmp(return_type, "char") == 0) {
        type = TYPE_CHAR;
    } else {
        fprintf(stderr, "Error: Unknown return type '%s'.\n", return_type);
        free(token);
        return ERROR; // Return an error token for invalid return types
    }

    // Extract function name
    char *func_name = strtok(NULL, "(");
    if (func_name == NULL) {
        fprintf(stderr, "Error: Missing function name after return type '%s'.\n", return_type);
        free(token);
        return ERROR; // Return an error token for missing function names
    }

    // Extract parameters inside the parentheses
    char *parameters = strtok(NULL, ")");
    int parameter_count = 0;
    DataType parameter_types[100]; // Assume a maximum of 100 parameters for simplicity

    if (parameters != NULL && strlen(parameters) > 0) {
        char *param = strtok(parameters, ",");
        while (param != NULL) {
            // Trim leading and trailing spaces
            while (*param == ' ' || *param == '\t') param++;
            char *end = param + strlen(param) - 1;
            while (*end == ' ' || *end == '\t') *(end--) = '\0';

            // Split into type and variable name
            char *param_type = strtok(param, " ");
            char *param_name = strtok(NULL, " ");

            if (param_type == NULL || param_name == NULL) {
                fprintf(stderr, "Error: Invalid parameter declaration '%s'.\n", param);
                free(token);
                return ERROR; // Return an error token for invalid parameters
            }

            // Determine parameter type
            if (strcmp(param_type, "int") == 0) {
                parameter_types[parameter_count++] = TYPE_INT;
            } else if (strcmp(param_type, "float") == 0) {
                parameter_types[parameter_count++] = TYPE_FLOAT;
            } else if (strcmp(param_type, "char") == 0) {
                parameter_types[parameter_count++] = TYPE_CHAR;
            } else {
                fprintf(stderr, "Error: Unknown parameter type '%s'.\n", param_type);
                free(token);
                return ERROR; // Return an error token for invalid parameter types
            }

            param = strtok(NULL, ",");
        }
    }

    yylval.s = func_name;

    // Validate and add to symbol table
    if (put_function(func_name, type, parameter_types, parameter_count)) {
        printf("Function %s of return type %s declared with %d parameter(s).\n", func_name, return_type, parameter_count);
        for (int i = 0; i < parameter_count; i++) {
            printf("  Parameter %d: Type %d\n", i + 1, parameter_types[i]);
        }
    } else {
        fprintf(stderr, "Error: Function %s could not be added to the symbol table.\n", func_name);
    }
    return ID; // Return a valid identifier token
} 
